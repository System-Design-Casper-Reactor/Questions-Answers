require('dotenv').config();
const pg = require('pg');

const pool = new pg.Pool({
  user: process.env.USERNAME,
  database: process.env.DATABASE_NAME,
  password: process.env.PASSWORD,
  port: process.env.PGPORT,
  host: 'localhost', //Insert Server ip address after deployment
});

(async () => {
  //Uncomment to RESET tables
  // THIS WILL DELETE ALL TABLES
  // await pool.query(`DROP TABLE photos, answers, questions`);

  await pool.query(
    `CREATE TABLE IF NOT EXISTS questions(
      id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      product_id int NOT NULL,
      question_body VARCHAR(1000) NOT NULL,
      asker_name VARCHAR(60) NOT NULL,
      asker_email VARCHAR(60) NOT NULL,
      question_date TIMESTAMP DEFAULT now(),
      question_helpfulness int DEFAULT 0,
      reported boolean DEFAULT false
    );`
  );
  await pool.query(
    `CREATE TABLE IF NOT EXISTS answers(
      id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      question_id int NOT NULL,
      body VARCHAR(1000) NOT NULL,
      answerer_name VARCHAR(60) NOT NULL,
      date TIMESTAMP DEFAULT now(),
      helpfulness int DEFAULT 0,
      reported boolean DEFAULT false,
      CONSTRAINT fk_question
        FOREIGN KEY(question_id)
          REFERENCES questions(id)
    );`
  );
  await pool.query(
    `CREATE TABLE IF NOT EXISTS photos(
      id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      answer_id int NOT NULL,
      url VARCHAR(1000) NOT NULL,
      CONSTRAINT fk_answer
        FOREIGN KEY(answer_id)
          REFERENCES answers(id)
    );`
  );
})();

module.exports = { pool };

/* const client = new pg.Client({
  user: process.env.USERNAME,
  database: process.env.DATABASE_NAME,
  password: process.env.PASSWORD,
  port: process.env.PGPORT,
  host: 'localhost', //Insert Server ip address after deployment
});
client.connect(); */
